#!/bin/ruby
gem 'redgreen'
require 'autotest/timestamp'
require 'autotest/growl'
require 'autotest/fsevent'

# module Autotest::GnomeNotify
#   def self.notify title, msg, img
#     system "notify-send '#{title}' '#{msg}' -i #{img} -t 3000"
#   end
#
#   Autotest.add_hook :ran_command do |at|
#     image_root = "~/.autotest_images"
#     results = [at.results].flatten.join("\n")
#     results.gsub!(/\\e\[\d+m/,'')
#     output = results.slice(/(\d+)\sexamples?,\s(\d+)\sfailures?(,\s(\d+)\spending?|)/)
#     full_sentence, green, failures, garbage, pending = $~.to_a.map(&:to_i)
#     if output
#       if failures > 0
#         notify "FAIL", "#{output}", "#{image_root}/fail.png"
#       elsif pending > 0
#         notify "Pending", "#{output}", "#{image_root}/pending.png"
#       else
#         notify "Pass", "#{output}", "#{image_root}/pass.png"
#       end
#     end
#   end
#
#   Autotest.add_hook :initialize do |autotest|
#       autotest.add_mapping(%r%^spec/(requests)/.*rb$%) do|filename, _|
#           filename
#       end
#   end
# end

module Autotest::Growl
  def self.growl title, msg, img, pri=0, stick=""
    system "growlnotify -n autotest --image #{img} -p #{pri} -m #{msg.inspect} #{title} #{stick}"
  end

  Autotest.add_hook :ran_command do |autotest|
    filtered = autotest.results.grep(/\d+\s.*examples?/)
    output = filtered.empty? ? '' : filtered.last.slice(/(\d+)\s.*examples?,\s(\d+)\s.*failures?(?:,\s(\d+)\s.*pending)?/)
    if output =~ /[1-9]\sfailures?/
      growl "Test Results", "#{output}", "~/.autotest_images/fail.png"
    elsif output =~ /pending/
      growl "Test Results", "#{output}", "~/.autotest_images/pending.png"
    else
      growl "Test Results", "#{output}", "~/.autotest_images/pass.png"
    end
  end
end

Autotest.add_hook :initialize do |at|
  %w{.svn .hg .git vendor}.each {|exception| at.add_exception(exception)}
end

